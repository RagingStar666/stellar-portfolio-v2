---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";

// Define a more complete interface for the entry data
interface WorkEntryData {
  company: string;
  role: string;
  dateStart: Date | string;
  dateEnd: string | Date;
  skills?: string[];
  achievements?: string[];
}

// Define the params type
export async function getStaticPaths() {
  const workEntries = await getCollection("work");
  
  return workEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Format dates
const dateStartStr = typeof entry.data.dateStart === 'string' 
  ? entry.data.dateStart 
  : entry.data.dateStart.toString();

const dateEndStr = entry.data.dateEnd === "Now" 
  ? "Present" 
  : (typeof entry.data.dateEnd === 'string' 
      ? entry.data.dateEnd 
      : entry.data.dateEnd.toString());

// Type assertion to make TypeScript understand our data structure
const entryData = entry.data as WorkEntryData;
---

<PageLayout title={`${entryData.role} at ${entryData.company}`} description={`Details about my role as ${entryData.role} at ${entryData.company}`}>
  <div class="container mx-auto p-6">
    <div class="max-w-4xl mx-auto">
      <!-- Breadcrumb Navigation -->
      <nav class="flex mb-8 text-sm text-black/60 dark:text-white/60">
        <a href="/" class="hover:text-black hover:dark:text-white transition-colors">Home</a>
        <span class="mx-2">/</span>
        <a href="/work" class="hover:text-black hover:dark:text-white transition-colors">Work Experience</a>
        <span class="mx-2">/</span>
        <span class="text-black dark:text-white">{entryData.company}</span>
      </nav>
      
      <!-- Header -->
      <div class="mb-10">
        <div class="bg-white dark:bg-black/20 rounded-lg shadow-sm border border-black/10 dark:border-white/10 overflow-hidden">
          <div class="aspect-video w-full relative">
            <img src="/placeholder-image.svg" alt={entryData.company} class="w-full h-full object-cover" />
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent"></div>
            <div class="absolute bottom-0 left-0 p-6">
              <span class="inline-block px-3 py-1 bg-black/60 text-white rounded-full text-sm mb-3">
                Professional Experience
              </span>
              <h1 class="text-3xl md:text-4xl font-bold text-white mb-2">{entryData.role}</h1>
              <p class="text-xl text-white/90">{entryData.company}</p>
              <p class="text-lg text-white/80">{dateStartStr} - {dateEndStr}</p>
            </div>
          </div>
          
          <!-- Content -->
          <div class="p-8">
            <div class="prose dark:prose-invert max-w-none">
              <Content />
            </div>
            
            <!-- Skills Tags (if applicable) -->
            {entryData.skills && Array.isArray(entryData.skills) && entryData.skills.length > 0 && (
              <div class="mt-8 pt-6 border-t border-black/10 dark:border-white/10">
                <h3 class="text-lg font-semibold mb-4 text-black dark:text-white">Skills & Technologies</h3>
                <div class="flex flex-wrap gap-2">
                  {entryData.skills.map((skill: string) => (
                    <span class="px-3 py-1 bg-black/5 dark:bg-white/10 rounded-full text-sm text-black/70 dark:text-white/70">
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
            )}
            
            <!-- Achievements (if applicable) -->
            {entryData.achievements && Array.isArray(entryData.achievements) && entryData.achievements.length > 0 && (
              <div class="mt-8 pt-6 border-t border-black/10 dark:border-white/10">
                <h3 class="text-lg font-semibold mb-4 text-black dark:text-white">Key Achievements</h3>
                <ul class="space-y-2">
                  {entryData.achievements.map((achievement: string) => (
                    <li class="flex items-start">
                      <span class="text-black dark:text-white mr-2">â€¢</span>
                      <span class="text-black/80 dark:text-white/80">{achievement}</span>
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      </div>
      
      <!-- Navigation -->
      <div class="flex justify-between mt-12">
        <a href="/work" class="inline-flex items-center px-4 py-2 bg-black/5 dark:bg-white/10 rounded-lg hover:bg-black/10 hover:dark:bg-white/20 transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
          </svg>
          Back to Work Experience
        </a>
      </div>
    </div>
  </div>
</PageLayout> 