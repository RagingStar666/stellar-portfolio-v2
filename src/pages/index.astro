---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import { SITE } from "@consts";

// Define expected types for our content collections based on the schema
type WorkEntry = {
  slug: string;
  data: {
    company: string;
    role: string;
    dateStart: Date;
    dateEnd: string | Date;
    // These properties don't exist in the schema but we're using them
    date?: Date; 
    position?: string;
    description?: string;
    tags?: string[];
    type?: string;
  };
};

type BlogEntry = {
  slug: string;
  data: {
    title: string;
    summary: string;
    date: Date;
    tags: string[];
    draft?: boolean;
  };
};

type ProjectEntry = {
  slug: string;
  data: {
    title: string;
    summary: string;
    date: Date;
    tags: string[];
    draft?: boolean;
    demoUrl?: string;
    repoUrl?: string;
    // These properties don't exist in the schema but we're using them
    client?: string;
    category?: string;
    description?: string;
  };
};

// Since education collection doesn't exist, create mock data
const universityDegree = {
  slug: "university-of-calcutta",
  data: {
    title: "B.A. LL.B. (Hons.)",
    institution: "University of Calcutta",
    date: new Date("2024-06-01"),
    type: "degree",
    description: "Five-year integrated law degree with focus on intellectual property and business law.",
    tags: ["Constitutional Law", "IP Law", "Corporate Law", "Legal Research"]
  }
};

const latestCertification = {
  slug: "adr-mediation-upskill",
  data: {
    title: "ADR Mediation Upskill Course",
    institution: "ADR Board, Department of Law, University of Calcutta",
    date: new Date("2024-12-01"),
    type: "certification",
    description: "Specialized training in mediation techniques and alternative dispute resolution approaches.",
    tags: ["ADR", "Mediation", "Negotiation", "Conflict Resolution"]
  }
};

// Get all work entries
const allWork = await getCollection("work") as unknown as WorkEntry[];
const workExperience = allWork
  .filter(work => work.data.type === "experience")
  .sort((a, b) => {
    const dateA = a.data.date instanceof Date ? a.data.date : new Date();
    const dateB = b.data.date instanceof Date ? b.data.date : new Date();
    return dateB.getTime() - dateA.getTime();
  });

// Get latest work experience
const latestWorkExperience = workExperience[0];

// Get internships and committee memberships
const internships = allWork
  .filter(work => work.data.type === "internship")
  .sort((a, b) => {
    const dateA = a.data.date instanceof Date ? a.data.date : new Date();
    const dateB = b.data.date instanceof Date ? b.data.date : new Date();
    return dateB.getTime() - dateA.getTime();
  });

const committees = allWork
  .filter(work => work.data.type === "committee")
  .sort((a, b) => {
    const dateA = a.data.date instanceof Date ? a.data.date : new Date();
    const dateB = b.data.date instanceof Date ? b.data.date : new Date();
    return dateB.getTime() - dateA.getTime();
  });

// Determine the more recent between latest internship and committee
const latestInternship = internships[0];
const latestCommittee = committees[0];

let secondExperience;
if (latestInternship && latestCommittee) {
  const internshipDate = latestInternship.data.date instanceof Date ? latestInternship.data.date : new Date();
  const committeeDate = latestCommittee.data.date instanceof Date ? latestCommittee.data.date : new Date();
  secondExperience = internshipDate.getTime() > committeeDate.getTime() 
    ? latestInternship 
    : latestCommittee;
} else {
  secondExperience = latestInternship || latestCommittee;
}

// Get all projects
const allProjects = await getCollection("projects") as unknown as ProjectEntry[];
const latestProjects = allProjects
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
  .slice(0, 2);

// Get all blog posts
const allPosts = await getCollection("blog") as unknown as BlogEntry[];
const latestPosts = allPosts
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.date.getTime() - a.data.date.getTime())
  .slice(0, 2);

// Define a position fallback in case SITE.POSITION doesn't exist
const positionLabel = "Law Student & Operations Professional";

---

<PageLayout title={SITE.TITLE} description={SITE.DESCRIPTION}>
  <div class="container min-h-screen mx-auto px-6 py-12">
    <div class="relative max-w-5xl mx-auto">
      <!-- Crescent moon with teal pulsating cracks -->
      <div class="absolute -top-32 -left-32 -rotate-45 opacity-70 blur-2xl -z-10">
        <div class="relative">
          <div class="absolute w-64 h-64 bg-gradient-to-br from-[#111111] to-[#000000] rounded-full overflow-hidden">
            <!-- Pulsating teal cracks -->
            <div class="absolute top-1/4 left-1/2 w-0.5 h-10 bg-[#3be9d1] rotate-45 opacity-40 animate-pulse"></div>
            <div class="absolute top-1/3 left-1/3 w-0.5 h-8 bg-[#3be9d1] rotate-[30deg] opacity-30 animate-pulse animation-delay-200"></div>
            <div class="absolute top-1/2 left-1/4 w-0.5 h-12 bg-[#3be9d1] rotate-[60deg] opacity-50 animate-pulse animation-delay-400"></div>
            <div class="absolute bottom-1/3 right-1/3 w-0.5 h-6 bg-[#3be9d1] rotate-[120deg] opacity-20 animate-pulse animation-delay-300"></div>
          </div>
          <div class="absolute w-64 h-64 bg-neutral-100 dark:bg-neutral-900 rounded-full -right-8 -top-8"></div>
        </div>
      </div>
      
      <!-- Profile Card with About Me -->
      <div class="glass-effect rounded-lg mb-12 p-10 relative">
        <div class="flex flex-col md:flex-row gap-6 items-center md:items-start">
          <div class="w-32 h-32 rounded-full overflow-hidden shrink-0">
            <img src="/placeholder-image.svg" alt={SITE.AUTHOR} class="w-full h-full object-cover" />
          </div>
          
          <div class="flex-1">
            <h1 class="text-3xl font-bold text-center md:text-left text-black dark:text-white mb-2">
              {SITE.AUTHOR}
            </h1>
            
            <h2 class="text-lg text-center md:text-left text-black/70 dark:text-white/70 mb-4">
              {positionLabel}
            </h2>
            
            <div class="text-black/80 dark:text-white/80 space-y-4">
              <p>
                Studying law with a focus on intellectual property, M&A, and finance law. Found Incenesto Studio 
                Gainzing operations, management, and strategy.
              </p>
              
              <div class="flex flex-wrap gap-2 mt-4">
                <a 
                  href="/work" 
                  class="px-3 py-1 rounded-full text-sm bg-black text-white dark:bg-[#3be9d1] dark:text-black 
                  hover:bg-black/80 dark:hover:bg-[#3be9d1]/80 transition-colors"
                >
                  View Experience
                </a>
                <a 
                  href="/about" 
                  class="px-3 py-1 rounded-full text-sm bg-transparent border border-black/10 dark:border-white/10
                  hover:bg-black/5 dark:hover:bg-white/5 text-black dark:text-white transition-colors"
                >
                  More About Me
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Education Section -->
      <section class="mb-16">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-black dark:text-white">Education</h2>
          <a href="/education" class="text-sm text-black/70 dark:text-[#3be9d1] hover:underline">View All â†’</a>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {universityDegree && (
            <a href={`/education/${universityDegree.slug}`} class="glass-effect rounded-lg p-6 block hover:shadow-md transition-all duration-300 card-hover-effect">
              <div class="flex flex-col h-full">
                <div class="mb-2 flex items-center justify-between">
                  <span class="text-xs text-black/60 dark:text-white/60">{new Date(universityDegree.data.date).getFullYear()}-Present</span>
                  <span class="px-2 py-0.5 bg-black/5 dark:bg-[#3be9d1]/10 rounded-full text-xs text-black/70 dark:text-[#3be9d1]/90">Degree</span>
                </div>
                <h3 class="text-xl font-medium text-black dark:text-white mb-1">{universityDegree.data.title}</h3>
                <p class="text-sm text-black/70 dark:text-white/70 mb-1">{universityDegree.data.institution}</p>
                <p class="text-sm text-black/60 dark:text-white/60 line-clamp-2 mb-4">{universityDegree.data.description}</p>
                <div class="mt-auto">
                  <div class="flex flex-wrap gap-1">
                    {universityDegree.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="px-2 py-0.5 bg-black/5 dark:bg-white/5 rounded-full text-xs text-black/70 dark:text-white/70">{tag}</span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          )}
          
          {latestCertification && (
            <a href={`/education/${latestCertification.slug}`} class="glass-effect rounded-lg p-6 block hover:shadow-md transition-all duration-300 card-hover-effect">
              <div class="flex flex-col h-full">
                <div class="mb-2 flex items-center justify-between">
                  <span class="text-xs text-black/60 dark:text-white/60">{new Date(latestCertification.data.date).getFullYear()}</span>
                  <span class="px-2 py-0.5 bg-black/5 dark:bg-[#3be9d1]/10 rounded-full text-xs text-black/70 dark:text-[#3be9d1]/90">Certification</span>
                </div>
                <h3 class="text-xl font-medium text-black dark:text-white mb-1">{latestCertification.data.title}</h3>
                <p class="text-sm text-black/70 dark:text-white/70 mb-1">{latestCertification.data.institution}</p>
                <p class="text-sm text-black/60 dark:text-white/60 line-clamp-2 mb-4">{latestCertification.data.description}</p>
                <div class="mt-auto">
                  <div class="flex flex-wrap gap-1">
                    {latestCertification.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="px-2 py-0.5 bg-black/5 dark:bg-white/5 rounded-full text-xs text-black/70 dark:text-white/70">{tag}</span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          )}
        </div>
      </section>
      
      <!-- Experience Section -->
      <section class="mb-16">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-black dark:text-white">Experience</h2>
          <a href="/work" class="text-sm text-black/70 dark:text-[#3be9d1] hover:underline">View All â†’</a>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {latestWorkExperience && (
            <a href={`/work/${latestWorkExperience.slug}`} class="glass-effect rounded-lg p-6 block hover:shadow-md transition-all duration-300 card-hover-effect">
              <div class="flex flex-col h-full">
                <div class="mb-2 flex items-center justify-between">
                  <span class="text-xs text-black/60 dark:text-white/60">{latestWorkExperience.data.date ? new Date(latestWorkExperience.data.date).getFullYear() : new Date().getFullYear()}-Present</span>
                  <span class="px-2 py-0.5 bg-black/5 dark:bg-[#3be9d1]/10 rounded-full text-xs text-black/70 dark:text-[#3be9d1]/90">Work</span>
                </div>
                <h3 class="text-xl font-medium text-black dark:text-white mb-1">{latestWorkExperience.data.position || latestWorkExperience.data.role}</h3>
                <p class="text-sm text-black/70 dark:text-white/70 mb-1">{latestWorkExperience.data.company}</p>
                <p class="text-sm text-black/60 dark:text-white/60 line-clamp-2 mb-4">{latestWorkExperience.data.description || 'No description available'}</p>
                <div class="mt-auto">
                  <div class="flex flex-wrap gap-1">
                    {latestWorkExperience.data.tags && latestWorkExperience.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="px-2 py-0.5 bg-black/5 dark:bg-white/5 rounded-full text-xs text-black/70 dark:text-white/70">{tag}</span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          )}
          
          {secondExperience && (
            <a href={`/work/${secondExperience.slug}`} class="glass-effect rounded-lg p-6 block hover:shadow-md transition-all duration-300 card-hover-effect">
              <div class="flex flex-col h-full">
                <div class="mb-2 flex items-center justify-between">
                  <span class="text-xs text-black/60 dark:text-white/60">{secondExperience.data.date ? new Date(secondExperience.data.date).getFullYear() : new Date().getFullYear()}</span>
                  <span class="px-2 py-0.5 bg-black/5 dark:bg-[#3be9d1]/10 rounded-full text-xs text-black/70 dark:text-[#3be9d1]/90">
                    {secondExperience.data.type === "internship" ? "Internship" : "Committee"}
                  </span>
                </div>
                <h3 class="text-xl font-medium text-black dark:text-white mb-1">{secondExperience.data.position || secondExperience.data.role}</h3>
                <p class="text-sm text-black/70 dark:text-white/70 mb-1">{secondExperience.data.company}</p>
                <p class="text-sm text-black/60 dark:text-white/60 line-clamp-2 mb-4">{secondExperience.data.description || 'No description available'}</p>
                <div class="mt-auto">
                  <div class="flex flex-wrap gap-1">
                    {secondExperience.data.tags && secondExperience.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="px-2 py-0.5 bg-black/5 dark:bg-white/5 rounded-full text-xs text-black/70 dark:text-white/70">{tag}</span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          )}
        </div>
      </section>
      
      <!-- Projects Section -->
      <section class="mb-16">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-black dark:text-white">Projects</h2>
          <a href="/projects" class="text-sm text-black/70 dark:text-[#3be9d1] hover:underline">View All â†’</a>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {latestProjects.map((project) => (
            <a href={`/projects/${project.slug}`} class="glass-effect rounded-lg p-6 block hover:shadow-md transition-all duration-300 card-hover-effect">
              <div class="flex flex-col h-full">
                <div class="mb-2 flex items-center justify-between">
                  <span class="text-xs text-black/60 dark:text-white/60">{new Date(project.data.date).getFullYear()}</span>
                  <span class="px-2 py-0.5 bg-black/5 dark:bg-[#3be9d1]/10 rounded-full text-xs text-black/70 dark:text-[#3be9d1]/90">{project.data.category || project.data.tags[0]}</span>
                </div>
                <h3 class="text-xl font-medium text-black dark:text-white mb-1">{project.data.title}</h3>
                <p class="text-sm text-black/70 dark:text-white/70 mb-1">{project.data.client || ''}</p>
                <p class="text-sm text-black/60 dark:text-white/60 line-clamp-2 mb-4">{project.data.description || project.data.summary}</p>
                <div class="mt-auto">
                  <div class="flex flex-wrap gap-1">
                    {project.data.tags && project.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="px-2 py-0.5 bg-black/5 dark:bg-white/5 rounded-full text-xs text-black/70 dark:text-white/70">{tag}</span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          ))}
        </div>
      </section>
      
      <!-- Blog Posts Section -->
      <section class="mb-16">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-black dark:text-white">Writing</h2>
          <a href="/blog" class="text-sm text-black/70 dark:text-[#3be9d1] hover:underline">View All â†’</a>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          {latestPosts.map((post) => (
            <a href={`/blog/${post.slug}`} class="glass-effect rounded-lg p-6 block hover:shadow-md transition-all duration-300 card-hover-effect">
              <div class="flex flex-col h-full">
                <div class="mb-2 flex items-center justify-between">
                  <span class="text-xs text-black/60 dark:text-white/60">{new Date(post.data.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}</span>
                  <span class="px-2 py-0.5 bg-black/5 dark:bg-[#3be9d1]/10 rounded-full text-xs text-black/70 dark:text-[#3be9d1]/90">{post.data.tags[0]}</span>
                </div>
                <h3 class="text-xl font-medium text-black dark:text-white mb-1">{post.data.title}</h3>
                <p class="text-sm text-black/60 dark:text-white/60 line-clamp-2 mb-4">{post.data.summary}</p>
                <div class="mt-auto">
                  <div class="flex flex-wrap gap-1">
                    {post.data.tags && post.data.tags.slice(0, 3).map((tag: string) => (
                      <span class="px-2 py-0.5 bg-black/5 dark:bg-white/5 rounded-full text-xs text-black/70 dark:text-white/70">{tag}</span>
                    ))}
                  </div>
                </div>
              </div>
            </a>
          ))}
        </div>
      </section>
    </div>
  </div>
</PageLayout>

<style>
  .animation-delay-200 {
    animation-delay: 200ms;
  }
  .animation-delay-300 {
    animation-delay: 300ms;
  }
  .animation-delay-400 {
    animation-delay: 400ms;
  }
  .card-hover-effect {
    transition: all 0.3s ease;
  }
  .card-hover-effect:hover {
    transform: translateY(-5px);
  }
</style>
