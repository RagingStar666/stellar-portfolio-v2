---
import { getCollection } from "astro:content"
import PageLayout from "@layouts/PageLayout.astro"
import { WORK } from "@consts"
import Breadcrumbs from "@components/Breadcrumbs.astro"

const collection = await getCollection("work")

collection.sort((a, b) => new Date(b.data.dateStart).getTime() - new Date(a.data.dateStart).getTime())

const work = await Promise.all(
  collection.map(async (item) => {
    const { Content } = await item.render()
    return { ...item, Content }
  })
)

// Separate work by type
const professionalExperience = work.filter(item => 
  item.data.role.toLowerCase().includes('director') || 
  item.data.role.toLowerCase().includes('founder') || 
  item.data.role.toLowerCase().includes('leader') || 
  item.data.role.toLowerCase().includes('manager')
);

// Create placeholder internships if no internships exist
const internshipsFromCollection = work.filter(item => 
  item.data.role.toLowerCase().includes('intern') || 
  item.data.role.toLowerCase().includes('trainee')
);

const internships = internshipsFromCollection.length > 0 ? internshipsFromCollection : [
  {
    slug: "jus-scriptum",
    data: {
      company: "Jus Scriptum Law Review",
      role: "Legal Research Intern",
      dateStart: new Date("2024-05-01"),
      dateEnd: new Date("2024-08-01"),
    },
    Content: () => `
      <p>Conducted legal research for peer-reviewed journal articles and assisted with case law analysis for publication.</p>
      <ul>
        <li>Researched precedents for constitutional law and intellectual property cases</li>
        <li>Assisted senior editors with citation verification and formatting</li>
        <li>Compiled literature reviews for upcoming academic publications</li>
        <li>Attended editorial board meetings and contributed to publication decision-making</li>
      </ul>
    `
  },
  {
    slug: "jus-corpus",
    data: {
      company: "Jus Corpus Legal Services",
      role: "Legal Intern",
      dateStart: new Date("2024-12-01"),
      dateEnd: "Present",
    },
    Content: () => `
      <p>Assisting with legal research, case preparation, and client communications at a boutique law firm specializing in intellectual property matters.</p>
      <ul>
        <li>Conduct preliminary client interviews and document preparation</li>
        <li>Research IP precedents and statutory provisions for ongoing cases</li>
        <li>Draft preliminary legal notices and communications</li>
        <li>Attend court proceedings and maintain detailed case notes</li>
      </ul>
    `
  }
];

// Create placeholder committees if no committees exist
const committeesFromCollection = work.filter(item => 
  item.data.role.toLowerCase().includes('committee') || 
  item.data.role.toLowerCase().includes('member')
);

const committees = committeesFromCollection.length > 0 ? committeesFromCollection : [
  {
    slug: "journal-and-seminar-committee",
    data: {
      company: "Department of Law, University of Calcutta",
      role: "Member, Journal and Seminar Committee",
      dateStart: new Date("2024-08-01"),
      dateEnd: "Present",
    },
    Content: () => `
      <p>Contributing to the organization of academic seminars, workshops, and the publication of the department's legal journal.</p>
      <ul>
        <li>Coordinate with faculty advisors on upcoming academic events</li>
        <li>Assist with the coordination of guest speakers and venue arrangements</li>
        <li>Review submitted articles for publication consideration</li>
        <li>Participate in editorial board meetings and publication decisions</li>
      </ul>
    `
  }
];

const links = [
  { name: "Home", url: "/" },
  { name: "Experience", url: "/work" }
];

function formatWorkDate(input: Date | string) {
  if (typeof input === "string") return input

  const month = input.toLocaleDateString("en-US", {
    month: "short",
  })

  const year = new Date(input).getFullYear()
  return `${month} ${year}`
}
---

<PageLayout title={WORK.TITLE} description={WORK.DESCRIPTION}>
  <div class="container mx-auto px-4 sm:px-6 py-12">
    <div class="max-w-5xl mx-auto">
      <Breadcrumbs links={links} />
      
      <!-- Section Heading -->
      <div class="glass-effect rounded-lg p-6 md:p-8 mb-8">
        <h1 class="text-2xl md:text-3xl font-bold text-black dark:text-white mb-2 md:mb-4">Professional Experience</h1>
        <p class="text-black/80 dark:text-white/80 text-sm md:text-base">
          A chronological overview of my professional journey, internships, and committee engagements,
          highlighting my experience in legal practice, operations management, and organizational leadership.
        </p>
      </div>
      
      <!-- Floating Navigation for Mobile -->
      <div class="floating-nav">
        <div class="floating-nav-content">
          <a href="#professional" class="floating-nav-item">Experience</a>
          <a href="#internships" class="floating-nav-item">Internships</a>
          <a href="#committees" class="floating-nav-item">Committees</a>
        </div>
      </div>

      <!-- Professional Experience Section -->
      <div id="professional" class="mb-12 md:mb-16 scroll-mt-24">
        <h2 class="text-xl md:text-2xl font-bold text-black dark:text-white mb-6 flex items-center">
          <span class="w-8 h-8 rounded-full bg-[#3be9d1]/20 flex items-center justify-center text-[#3be9d1] mr-3 text-xs">P</span>
          Professional Experience
        </h2>
        
        <!-- LinkedIn-style Timeline -->
        <div class="timeline-container">
          <div class="timeline-line"></div>
          
          {professionalExperience.map((entry) => (
            <div class="timeline-item">
              <div class="timeline-node"></div>
              <a href={`/work/${entry.slug}`} class="timeline-content glass-effect rounded-lg p-5 block transition-all duration-300 hover:translate-y-[-5px]">
                <div class="text-[#3be9d1] text-sm font-medium uppercase tracking-wider mb-2">
                  {formatWorkDate(entry.data.dateStart)} - {formatWorkDate(entry.data.dateEnd)}
                </div>
                
                <h3 class="text-lg font-semibold text-black dark:text-white">{entry.data.role}</h3>
                <p class="text-black/80 dark:text-white/80 mb-4">{entry.data.company}</p>
                
                <div class="text-black/70 dark:text-white/70 text-sm prose-sm dark:prose-invert">
                  <entry.Content />
                </div>
              </a>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Internships Section -->
      <div id="internships" class="mb-12 md:mb-16 scroll-mt-24">
        <h2 class="text-xl md:text-2xl font-bold text-black dark:text-white mb-6 flex items-center">
          <span class="w-8 h-8 rounded-full bg-[#3be9d1]/20 flex items-center justify-center text-[#3be9d1] mr-3 text-xs">I</span>
          Internships
        </h2>
        
        <!-- LinkedIn-style Timeline -->
        <div class="timeline-container">
          <div class="timeline-line"></div>
          
          {internships.map((entry) => (
            <div class="timeline-item">
              <div class="timeline-node"></div>
              <a href={`/work/internships/${entry.slug}`} class="timeline-content glass-effect rounded-lg p-5 block transition-all duration-300 hover:translate-y-[-5px]">
                <div class="text-[#3be9d1] text-sm font-medium uppercase tracking-wider mb-2">
                  {formatWorkDate(entry.data.dateStart)} - {formatWorkDate(entry.data.dateEnd)}
                </div>
                
                <h3 class="text-lg font-semibold text-black dark:text-white">{entry.data.role}</h3>
                <p class="text-black/80 dark:text-white/80 mb-4">{entry.data.company}</p>
                
                <div class="text-black/70 dark:text-white/70 text-sm prose-sm dark:prose-invert">
                  <entry.Content />
                </div>
              </a>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Committees Section -->
      <div id="committees" class="mb-12 md:mb-16 scroll-mt-24">
        <h2 class="text-xl md:text-2xl font-bold text-black dark:text-white mb-6 flex items-center">
          <span class="w-8 h-8 rounded-full bg-[#3be9d1]/20 flex items-center justify-center text-[#3be9d1] mr-3 text-xs">C</span>
          Committees & Organizations
        </h2>
        
        <!-- LinkedIn-style Timeline -->
        <div class="timeline-container">
          <div class="timeline-line"></div>
          
          {committees.map((entry) => (
            <div class="timeline-item">
              <div class="timeline-node"></div>
              <a href={`/work/committees/${entry.slug}`} class="timeline-content glass-effect rounded-lg p-5 block transition-all duration-300 hover:translate-y-[-5px]">
                <div class="text-[#3be9d1] text-sm font-medium uppercase tracking-wider mb-2">
                  {formatWorkDate(entry.data.dateStart)} - {formatWorkDate(entry.data.dateEnd)}
                </div>
                
                <h3 class="text-lg font-semibold text-black dark:text-white">{entry.data.role}</h3>
                <p class="text-black/80 dark:text-white/80 mb-4">{entry.data.company}</p>
                
                <div class="text-black/70 dark:text-white/70 text-sm prose-sm dark:prose-invert">
                  <entry.Content />
                </div>
              </a>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>
</PageLayout>

<style>
  /* Updated glass effect for dark background */
  .glass-effect {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
</style>

<script>
// Script to update active state on floating nav based on scroll position
document.addEventListener('DOMContentLoaded', () => {
  const sections = document.querySelectorAll('[id]');
  const navItems = document.querySelectorAll('.floating-nav-item');
  
  function updateActiveNavItem() {
    let currentSection = '';
    
    sections.forEach((section) => {
      const sectionElement = section as HTMLElement;
      const sectionTop = sectionElement.offsetTop;
      const sectionHeight = sectionElement.offsetHeight;
      if (window.scrollY >= sectionTop - 100 && window.scrollY < sectionTop + sectionHeight - 100) {
        const id = section.getAttribute('id');
        if (id) {
          currentSection = id;
        }
      }
    });
    
    navItems.forEach(item => {
      item.classList.remove('active');
      const href = item.getAttribute('href');
      if (href === `#${currentSection}`) {
        item.classList.add('active');
      }
    });
  }
  
  window.addEventListener('scroll', updateActiveNavItem);
  updateActiveNavItem();
});
</script> 