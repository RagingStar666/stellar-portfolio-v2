---
import { SITE, LINKS } from "@consts"
import { cn } from "@lib/utils"
const { pathname } = Astro.url
const subpath = pathname.match(/[^/]+/g)
import Container from "@components/Container.astro"
---

<header id="header" class="fixed top-0 w-full h-16 z-50 bg-transparent dark:bg-transparent transition-colors duration-300 ease-in-out backdrop-blur-sm">
  <Container size="md">
    <div class="relative h-full w-full">
      <div class="absolute left-0 top-1/2 -translate-y-1/2 flex gap-1 font-semibold">
        <a href="/" class="flex gap-1 text-[#3a3a3a] dark:text-white hover:text-[#d8936a] dark:hover:text-[#3be9d1] transition-colors duration-300 ease-in-out">
          <svg class="size-6 stroke-current" width="24" height="24">
            <use href="/brand.svg#brand"></use>
          </svg>
        </a>
      </div>

    <div class="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
      <nav class="flex items-center justify-center text-xs sm:text-sm gap-0.5 sm:gap-1 overflow-x-auto max-w-full">
        {
          LINKS.map((LINK) => (
            <a href={LINK.HREF} class={cn("h-8 rounded-full px-2 sm:px-3 whitespace-nowrap", "flex items-center justify-center", "transition-colors duration-300 ease-in-out", pathname === LINK.HREF || "/" + subpath?.[0] === LINK.HREF ? "bg-[#d8936a] dark:bg-[#3be9d1] text-white dark:text-black" : "text-[#3a3a3a] dark:text-white hover:bg-[#d8936a]/20 dark:hover:bg-[#3be9d1]/20 hover:text-[#d8936a] dark:hover:text-[#3be9d1]")}>
              {LINK.TEXT}
            </a>
          ))
        }
      </nav>
    </div>

    <div class="buttons absolute right-0 top-1/2 -translate-y-1/2 flex gap-1">
      <a href="/search" aria-label={`Search blog posts and projects on ${SITE.TITLE}`} class={cn("flex", "size-9 rounded-full p-2 items-center justify-center", "bg-transparent hover:bg-[#d8936a]/20 dark:hover:bg-[#3be9d1]/20", "stroke-[#3a3a3a] hover:stroke-[#d8936a] dark:stroke-white dark:hover:stroke-[#3be9d1]", "border border-[#3a3a3a]/10 dark:border-white/10", "transition-colors duration-300 ease-in-out", pathname === "/search" || "/" + subpath?.[0] === "/search" ? "pointer-events-none bg-[#d8936a] dark:bg-[#3be9d1] stroke-white dark:stroke-black" : "")}>
        <svg class="size-full">
          <use href="/ui.svg#search"></use>
        </svg>
      </a>

      <button id="theme-toggle" aria-label={`Toggle light and dark theme`} class={cn("flex", "size-9 rounded-full p-2 items-center justify-center", "bg-transparent hover:bg-[#d8936a]/20 dark:hover:bg-[#3be9d1]/20", "stroke-[#3a3a3a] hover:stroke-[#d8936a] dark:stroke-white dark:hover:stroke-[#3be9d1]", "border border-[#3a3a3a]/10 dark:border-white/10", "transition-colors duration-300 ease-in-out")}>
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 dark:hidden" viewBox="0 0 24 24" stroke="currentColor" fill="none">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 hidden dark:block" viewBox="0 0 24 24" stroke="currentColor" fill="none">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      </button>
    </div>
  </div>
  </Container>
</header>

<style>
  .bg-midnight-blue {
    background-color: #0d1b2a;
  }

  header.scrolled {
    background-color: rgba(255, 240, 243, 0.85) !important;
  }

  html.dark header.scrolled {
    background-color: rgba(10, 25, 41, 0.75) !important;
  }
</style>

<script is:inline>
  // Add event listener for theme toggle button
  document.addEventListener('astro:page-load', () => {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', () => {
        if (typeof window.changeTheme === 'function') {
          window.changeTheme();
        } else {
          // Fallback if global function is not available
          const element = document.documentElement;
          if (element.classList.contains('dark')) {
            element.classList.remove('dark');
            localStorage.setItem('theme', 'light');
          } else {
            element.classList.add('dark');
            localStorage.setItem('theme', 'dark');
          }
        }
      });
    }

    // Handle scroll for header background
    const header = document.getElementById('header');
    if (header) {
      window.addEventListener('scroll', () => {
        if (window.scrollY > 10) {
          header.classList.add('scrolled');
        } else {
          header.classList.remove('scrolled');
        }
      });
      // Check initial scroll position
      if (window.scrollY > 10) {
        header.classList.add('scrolled');
      }
    }
  });
</script>
